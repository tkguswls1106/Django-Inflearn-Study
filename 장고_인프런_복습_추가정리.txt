<<장고 인프런 복습 추가 정리>>

<장고의 백엔드 프론트엔드>
웹앱의 view.py 파일에는 백엔드 코드
웹앱에 templates 라는 디렉토리 안의 html파일에는 프론트엔드 코드
웹앱에 static 이라는 디렉토리 안에는 정적인 콘텐츠인 css파일, js파일, 이미지파일을 넣으며, 이는 프론트엔드 코드

<필요한 과정 (대부분의 from import나 그런건 생략했음.)>
각 웹앱에 urls.py 파일 만들기.
그리고 각 웹앱마다 프로젝트의 urls.py로 해당 웹앱의 urls.py를 서로 path include 연결시켜주어야함.
->
각 웹앱에 templates 라는 디렉토리 생성하기. 그 안에 html파일(예를들어 index.html 파일) 생성하면됨.
그 html 파일안의 내용중에서 <html lang="ko">로 바꿔주기
->
해당 웹앱의 views.py 파일에 from django.template import loader 적어주기.
->
해당 웹앱의 views.py 파일의 해당 def 메소드(함수) 안에 template = loader.get_template('index.html') 처럼 적어주기.
context = {}
return HttpResponse(template.render(context, request))
이것도 적어주기
하지만 나중에 from django.shortcuts import render 덕분에 코드 단축이 가능해진다.
->
메소드에 loader와 render 과정까지 모두 끝났다면, 해당 메소드가 들어있는 views.py 파일이 들어있는 웹앱의 이름을
프로젝트의 settings.py 파일 안의 INSTALLED_APPS 부분의 [ ]  안에 적어주자. 예를들어 'firstapp', 이런식으로 말이다.
그래야지 이제 장고에서 템플릿 디렉토리를 인식하여 사용할 수 있게 된다. (기왕이면 이건 첫번째과정의 마지막에 해주는게 좋을듯하다.)
그리고 이뿐만아니라, 예를들어 'secondapp'이라는 웹앱에서 models.py 파일에다가 뭘 적는다면, 그 'secondapp'도 프로젝트의 settings.py 파일 안의 INSTALLED_APPS 부분의 [ ]  안에 적어주자.
->
각 웹앱에 static 이라는 디렉토리 생성하기.
->
프로젝트 폴더의 settings.py 파일에 
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]
적어주기.
이후 나중에 html파일에서 static 파일을 사용할때에는 위에 {% load static %} 를 적어주면 된다.
->
만약 웹앱이 여러개가 되면, 나중에 static import 한것때문에 웹앱끼리 스태틱 파일 불러올때 충돌이 일어날 수 있으니,
각 웹앱의 static 디렉토리 안에 특정이름을 지은 디렉토리를 하나 더 만들어주고, 원래 static 디렉토리 안에 들어있던 모든 정적 콘텐츠 파일들을 모두 해당 디렉토리로 옮겨준다.
위의 static 디렉토리의 경우처럼, templates 디렉토리의 html 파일들도 똑같은 방법으로 진행해준다.
->
만약 모델 클래스를 작성할것이라면, 각 웹앱의 models.py 파일에다가 적으면되고,
굳이 폼을 따로 작성해주고싶다면, 각 웹앱에 forms.py 라는 파일을 생성하여 거기다가 폼 클래스를 적으면 된다.
(참고로 모델 클래스와 폼 클래스의 코드 작성 방식이 얼추 비슷하다.)
나중에는 굳이 forms.py 파일에 models.py 파일의 변수를 따라 적지 않고도, forms.py 파일 내에서 models.py 파일의 변수를 끌고와서 적는 모델폼클래스 사용으로 쉽게 연결을 할 수 있다.

<라우팅 과정>
사용자 접속 -> 프로젝트 폴더의 urls.py의 path에 적힌 include안의 매개변수에 따라 어떤 웹앱으로 접속할건지 결정(그래서 각 웹앱마다 프로젝트의 url.py로 path include 연결시켜주어야함)
-> 해당 웹앱의 urls.py로 이동 -> 해당 웹앱의 views.py로 이동 -> def 메소드(함수) 실행
-> 해당 메소드의 리턴값인 render의 매개변수중 html 파일을, 해당 웹앱의 templates 디렉토리에서 찾아, 해당 html 파일을 실행시킴.
-> 그러면 접속 사이트에 해당 html 파일의 내용이 실행되어 나타남.

<템플릿과 loader와 render>
템플릿의 html파일을 불러오는건 loader이고, 템플릿에다가 다시 전달해주는게 render 이다.
=> 결론:
'웹앱'의 'views.py 파일'의 '메소드'의 'loader'로, 'templates 디렉토리'의 '해당 html 파일'을 불러오고
'웹앱'의 'views.py 파일'의 '메소드'의 'render'로, 해당 메소드에서 선언한 context 딕셔너리 변수의 키값을 'templates 디렉토리'의 '해당 html 파일'로 전달하고, 그리고 '해당 html 파일'을 실행한다.
(하지만 나중에 from django.shortcuts import render 덕분에 코드 단축으로 render 안의 매개변수가 바뀌고, loader은 따로 잘 쓰지 않게 된다.)

<템플레이팅 중괄호 문법 (렌더링하며 파이썬 코드를 html파일에서 사용할때)>
=> 장고 템플레이팅 중괄호 정리:
단, 장고 템플릿으로 html 파일에서 렌더링하는 과정에서, a태그의 url로 name값으로 변수를 넣어주거나, if 조건문이나 for while 반복문처럼 파이썬 문법의 코드를 사용할때, {% %} 이런식으로 중괄호와 %로 감싸주는 형식으로 사용한다.
그리고 마지막에 {% endfor %} 이나 {% endif %} 같은 end를 적어주어야한다.
그리고 렌더링한 변수를 그저 출력만 하고싶을때만 {{ }} 이렇게 중괄호를 두번을 써주는 것이다.

<forms.py와 models.py와 view.py와 urls.py와 html파일의 입력request값 이동 및 실행 과정 관련 내용>
MD_django_inflearn_study 파일에 따로 자세히 적어두었음.

<기타 등등 정리>
예를들어 사이트 페이지를 여러개 만들어 띄우고 싶다면, 해당 웹앱의 views.py 파일에 def 메소드를 그만큼 메소드 종류를 추가하면된다.

<form action="{% url 'result' %}" method="get">   <!-- action은 method인 get으로 반환받은 값을 어느 path로 전달하면 될지 적어주는 것이다. -->
    <input type="number" name="number"/>        <!-- number 타입을 입력받게 되어있다. -->
    					     <!-- 과정을 설명하자면, 숫자를 입력해주면, urls.py 파일의 path('result/')부분을 찾아가고(아마 name='result' 라고 된 path 부분일지도?), 그 안에 적힌 views.result 때문에,
    					      views.py 파일의 def result 메소드의 request 매개변수 값으로 해당 입력한 숫자의 값이 전달되어 해당 메소드를 실행하게 되는것이다. -->
    <button type="submit">결과보기</button>
</form>

------------------------------------------
현재 인프런에서 'R: 게시글 상세화면 구현하기' 강의까지 시청 완료함.
인프런에서 'GitHub으로 배포 준비하기' 강의 시청 완료함.
인프런에서 'AWS에 환경 구축하기' 강의 시청 완료함.
인프런에서 'uWSGI 세팅하기' 강의 시청 완료함.
인프런에서 '도메인 연결하기' 강의 시청 완료함.
